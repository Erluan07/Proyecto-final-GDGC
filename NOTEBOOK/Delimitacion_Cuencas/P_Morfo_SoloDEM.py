# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# P_Morfo_Ciclo.py
# Created on: 2024-04-16 11:28:30.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: P_Morfo_Ciclo <Input_Dem> <Input_Point> <Workspace> 
# Description: 
# Ezequiel De Jesús Ferro Palacios
# Universidad Nacional
# ejferrop@unal.edu.co

# ---------------------------------------------------------------------------


import arcpy

import arcpy
import os

arcpy.env.overwriteOutput = True

# Argumentos del script
Input_Dem = arcpy.GetParameterAsText(0)
Orden_maximo = int(arcpy.GetParameterAsText(1))
Orden_minimo = int(arcpy.GetParameterAsText(2))
Area_Maxima = float(1000000 * 500)
Area_Minima = float(1000000 * 50)


arcpy.env.overwriteOutput = True

# Obtener directorio de DEM
arcpy.AddMessage("Obteniendo directorio de trabajo...")
DES_DEM = arcpy.Describe(Input_Dem)
Workspace = DES_DEM.path + "\\"
arcpy.AddMessage("...completado")

# Local variables:
Fill_tif = Workspace + "Fill.tif"
Output_drop_raster = ""
FlowDir_tif = Workspace + "FlowDir.tif"
FlowAcc_tif = Workspace + "FlowAcc.tif"
rastercal_tif = Workspace + "rastercal.tif"
StreamO_tif = Workspace + "StreamO.tif"
Drenajes_Prev_shp = Workspace + "Drenajes_Prev.shp"
Point_Layer = "Igua_Point_Layer"
Watersh_tif = Workspace + "Watersh.tif"
Cuenca_value__shp = Workspace + "Cuenca%value%.shp"
Cuenca_T = Cuenca_value__shp
Fill_Clip_tif = Workspace + "Fill_Clip.tif"
Slope_tif = Workspace + "Slope.tif"
Reclas_Slop_tif = Workspace + "Reclas_Slop.tif"
ZonalSt_Slope = Workspace + "ZonalSt_Slope"
Zonal_Slope_value__xls = Workspace + "Zonal_Slope%value%.xls"
Delete_succeeded = "true"
Drenajes_value__shp = Workspace + "Drenajes%value%.shp"
Drenajes_shp__3_ = Drenajes_value__shp
Drenajes_shp__2_ = Drenajes_shp__3_
Drenajes_Table_value__xls = Workspace + "Drenajes_Table%value%.xls"
Delete_succeeded__2_ = "true"
Delete_succeeded__3_ = "true"
Delete_succeeded__5_ = "true"
Delete_succeeded__6_ = "true"
Delete_succeeded__7_ = "true"
Delete_succeeded__8_ = "true"
Delete_succeeded__9_ = "true"
Datos_Cuenca_value__xls = Workspace + "Datos_Cuenca%value%.xls"
Cuenca_MBG_value_ = Workspace + "Cuenca_MBG%value%"
Cuenca_MBG_value__xls = Workspace + "Cuenca_MBG%value%.xls"
DEM_Clip_tif = Workspace + "DEM_Clip.tif"
Reclass_dem_tif = Workspace + "Reclass_dem.tif"
ZonalDem = Workspace + "ZonalDem"
Areas_Curva_value__xls = Workspace + "Areas_Curva%value%.xls"
Delete_succeeded__4_ = "true"
Delete_succeeded__10_ = "true"
Delete_succeeded__11_ = "true"
Delete_succeeded__12_ = "true"
Delete_succeeded__13_ = "true"
Delete_succeeded__14_ = "true"
Delete_succeeded__15_ = "true"
Delete_succeeded__16_ = "true"
Delete_succeeded__17_ = "true"
Delete_succeeded__18_ = "true"
Delete_succeeded__19_ = "true"



arcpy.AddMessage("Process: Fill")
arcpy.gp.Fill_sa(Input_Dem, Fill_tif, "")

arcpy.AddMessage("Process: Flow Direction")
arcpy.gp.FlowDirection_sa(Fill_tif, FlowDir_tif, "NORMAL", Output_drop_raster, "D8")


arcpy.AddMessage("Process: Flow Accumulation")
arcpy.gp.FlowAccumulation_sa(FlowDir_tif, FlowAcc_tif, "", "FLOAT", "D8")

arcpy.AddMessage("Expresion para la calculadora de raster")
expression = "Con(\"{}\" >= 1000, 1)".format(FlowAcc_tif)

arcpy.AddMessage("Ejecutar la calculadora de raster")
arcpy.gp.RasterCalculator_sa(expression, rastercal_tif)


arcpy.AddMessage("Process: Stream Order")
arcpy.gp.StreamOrder_sa(rastercal_tif, FlowDir_tif, StreamO_tif, "STRAHLER")

arcpy.AddMessage("Process: Stream to Feature")
arcpy.gp.StreamToFeature_sa(StreamO_tif, FlowDir_tif, Drenajes_Prev_shp, "NO_SIMPLIFY")


#=============================================================================
#==============DEFINIR CUENCAS ===============================================

# Process: Unsplit Line (Unsplit Line) (management)
Drenajes_UnSplit = Workspace + "Drenajes_UnSplit.shp"
arcpy.management.UnsplitLine(in_features=Drenajes_Prev_shp, out_feature_class=Drenajes_UnSplit_shp, dissolve_field=[], statistics_fields=[], concatenation_separator="")
# Process: Unsplit Line
arcpy.UnsplitLine_management(Drenajes_Prev_shp, Drenajes_UnSplit, "grid_code", "")

# Crear una capa para las cuencas finales
Cuencas_final = os.path.join(Workspace, "Cuencas_final.shp")
if arcpy.Exists(Cuencas_final):
    arcpy.Delete_management(Cuencas_final)
arcpy.CreateFeatureclass_management(Workspace, "Cuencas_final.shp", "POLYGON", spatial_reference=arcpy.Describe(Drenajes_UnSplit).spatialReference)


# Agregar campo de área a la capa final
arcpy.AddField_management(Cuencas_final, "Area", "DOUBLE")


# Ciclo para repetir el proceso varias veces
for i in range(Orden_maximo, Orden_minimo - 1, -1):
    arcpy.AddMessage(u"Procesando orden " + str(i))
    
    # Proceso: Seleccionar capa por atributo
    arcpy.AddMessage(u"Creando capa temporal...")
    arcpy.MakeFeatureLayer_management(Drenajes_UnSplit, "Drenajes_UnSplit_lyr")

    where_clause = u"grid_code = " + str(i) + u" OR grid_code = " + str(i-1)
    arcpy.AddMessage(u"Seleccionando con where_clause: " + where_clause)
    arcpy.SelectLayerByAttribute_management("Drenajes_UnSplit_lyr", "NEW_SELECTION", where_clause)

    # Exportar la selección a una nueva capa temporal
    temp_layer = os.path.join(Workspace, "temp_selection.shp")
    arcpy.AddMessage(u"Exportando selección a: " + temp_layer.decode('utf-8'))
    arcpy.CopyFeatures_management("Drenajes_UnSplit_lyr", temp_layer)

    # Verificar si la capa temporal se creó correctamente
    if not arcpy.Exists(temp_layer):
        arcpy.AddError(u"No se pudo crear la capa temporal: " + temp_layer.decode('utf-8'))
        continue

    # Nombre dinámico para el resultado de la intersección
    UnSplitX1_Inter = os.path.join(Workspace, "UnSplitX1_Inter_" + str(i) + ".shp")
    arcpy.AddMessage(u"Realizando intersección. Resultado: " + UnSplitX1_Inter.decode('utf-8'))

    # Proceso: Intersección usando la capa temporal
    arcpy.Intersect_analysis([temp_layer], UnSplitX1_Inter, "ALL", "", "POINT")

    # Eliminar la capa temporal
    arcpy.AddMessage(u"Eliminando capa temporal...")
    arcpy.Delete_management(temp_layer)

    # Nombre dinámico para Snap Pour Point
    SnapPou_UnSp = "{}SnapPou_UnSp{}".format(Workspace, i)

    # Proceso: Snap Pour Point
    arcpy.gp.SnapPourPoint_sa(UnSplitX1_Inter, FlowAcc_tif, SnapPou_UnSp, "0", "FID")

    # Nombre dinámico para Watershed
    Watersh = "{}Watersh{}".format(Workspace, i)

    # Proceso: Watershed
    arcpy.gp.Watershed_sa(FlowDir_tif, SnapPou_UnSp, Watersh, "")

    # Nombre dinámico para Raster to Polygon
    Cuencas_shp = os.path.join(Workspace, "Cuencas_{}.shp".format(i))

    # Proceso: Convertir raster a polígono
    arcpy.RasterToPolygon_conversion(Watersh, Cuencas_shp, "SIMPLIFY", "", "SINGLE_OUTER_PART", "")

    # Agregar campo de área
    arcpy.AddField_management(Cuencas_shp, "Area", "DOUBLE")

    # Calcular el área de los polígonos
    arcpy.AddMessage(u"Calculando área para: " + Cuencas_shp)
    arcpy.CalculateField_management(Cuencas_shp, "Area", "!shape.area!", "PYTHON_9.3")

    ## Crear una capa temporal del shapefile de cuencas
    arcpy.AddMessage(u"Creando capa temporal de: " + Cuencas_shp)
    arcpy.MakeFeatureLayer_management(Cuencas_shp, "Cuencas_lyr")

    # Seleccionar cuencas fuera del rango de área (tanto por encima como por debajo)
    where_clause = "Area < {} OR Area > {}".format(Area_Minima, Area_Maxima)
    arcpy.AddMessage(u"Seleccionando cuencas fuera del rango de área con where_clause: " + where_clause)
    arcpy.SelectLayerByAttribute_management("Cuencas_lyr", "NEW_SELECTION", where_clause)

    # Contar cuántas cuencas fueron seleccionadas (fuera del rango)
    result = arcpy.GetCount_management("Cuencas_lyr")
    count_selected = int(result.getOutput(0))
    arcpy.AddMessage(u"Número de cuencas fuera del rango de área: {}".format(count_selected))

    if count_selected > 0:
        # Eliminar las cuencas fuera del rango de área
        arcpy.AddMessage(u"Eliminando cuencas fuera del rango de área")
        arcpy.DeleteFeatures_management("Cuencas_lyr")
    else:
        arcpy.AddMessage(u"No se encontraron cuencas fuera del rango de área")

    # Limpiar la selección
    arcpy.SelectLayerByAttribute_management("Cuencas_lyr", "CLEAR_SELECTION")

    # Contar cuántas cuencas quedan después de la eliminación
    result = arcpy.GetCount_management(Cuencas_shp)
    count = int(result.getOutput(0))
    arcpy.AddMessage(u"Número de cuencas restantes: {}".format(count))

    # Calcular estadísticas de área después de la selección
    arcpy.Statistics_analysis(Cuencas_shp, "in_memory/stats_final", [["Area", "MIN"], ["Area", "MAX"], ["Area", "MEAN"]])
    with arcpy.da.SearchCursor("in_memory/stats_final", ["MIN_Area", "MAX_Area", "MEAN_Area"]) as cursor:
        for row in cursor:
            arcpy.AddMessage(u"Estadísticas de área después de la selección - Mínima: {}, Máxima: {}, Media: {}".format(row[0], row[1], row[2]))

    # Imprimir áreas de las primeras 5 cuencas restantes
    arcpy.AddMessage(u"Áreas de las primeras 5 cuencas restantes:")
    with arcpy.da.SearchCursor(Cuencas_shp, ["Area"]) as cursor:
        for i, row in enumerate(cursor):
            if i < 5:
                arcpy.AddMessage(u"Cuenca {}: Área = {}".format(i+1, row[0]))
            else:
                break

    # Eliminar la capa temporal al final
    arcpy.Delete_management("Cuencas_lyr")

    # Contar cuántas cuencas quedan después de la eliminación
    result = arcpy.GetCount_management(Cuencas_shp)
    count = int(result.getOutput(0))
    arcpy.AddMessage(u"Número de cuencas restantes: {}".format(count))


    # Finalmente, puedes agregar un mensaje para indicar que el procesamiento para este orden ha terminado
    arcpy.AddMessage(u"Procesamiento completado para el orden {}".format(i))

    # Fuera del bucle for, podrías agregar algún mensaje de finalización
    arcpy.AddMessage(u"Procesamiento completo para todos los órdenes")


   
    # Al final del bucle, después de procesar las cuencas individuales:
    arcpy.AddMessage(u"Agregando cuencas de orden {} a la capa final".format(i))
    
    # Crear capas temporales
    arcpy.MakeFeatureLayer_management(Cuencas_shp, "Cuencas_{}".format(i))
    arcpy.MakeFeatureLayer_management(Cuencas_final, "Cuencas_final_lyr")
    
    # Seleccionar las cuencas que no se solapan con las cuencas ya existentes en la capa final
    arcpy.SelectLayerByLocation_management("Cuencas_{}".format(i), "HAVE_THEIR_CENTER_IN", "Cuencas_final_lyr", "", "NEW_SELECTION", "INVERT")
    
    # Contar cuántas cuencas fueron seleccionadas
    result = arcpy.GetCount_management("Cuencas_{}".format(i))
    count_selected = int(result.getOutput(0))
    arcpy.AddMessage(u"Número de cuencas de orden {} a agregar: {}".format(i, count_selected))
    
    if count_selected > 0:
        # Configurar el mapeo de campos para la operación Append
        field_mapping = arcpy.FieldMappings()
        field_mapping.addTable(Cuencas_final)
        field_mapping.addTable("Cuencas_{}".format(i))
        
        # Agregar las cuencas seleccionadas a la capa final
        arcpy.Append_management("Cuencas_{}".format(i), Cuencas_final, "NO_TEST", field_mapping)
        arcpy.AddMessage(u"Cuencas de orden {} agregadas a la capa final".format(i))
    else:
        arcpy.AddMessage(u"No se encontraron cuencas de orden {} para agregar".format(i))
    
    # Limpiar las capas temporales
    arcpy.Delete_management("Cuencas_{}".format(i))
    arcpy.Delete_management("Cuencas_final_lyr")

# Fuera del bucle for, agregar un mensaje de finalización
arcpy.AddMessage(u"Procesamiento completo para todos los órdenes")
arcpy.AddMessage(u"Capa final de cuencas creada en: {}".format(Cuencas_final))

# Calcular el área para la capa final
arcpy.CalculateField_management(Cuencas_final, "Area", "!shape.area!", "PYTHON_9.3")

# Calcular estadísticas finales
arcpy.AddMessage(u"Calculando estadísticas finales")
field_names = [f.name for f in arcpy.ListFields(Cuencas_final)]
if "Area" in field_names:
    arcpy.Statistics_analysis(Cuencas_final, "in_memory/stats_final", [["Area", "MIN"], ["Area", "MAX"], ["Area", "MEAN"]])
    with arcpy.da.SearchCursor("in_memory/stats_final", ["MIN_Area", "MAX_Area", "MEAN_Area"]) as cursor:
        for row in cursor:
            arcpy.AddMessage(u"Estadísticas de área de la capa final - Mínima: {}, Máxima: {}, Media: {}".format(row[0], row[1], row[2]))
else:
    arcpy.AddError("El campo 'Area' no existe en la capa final de cuencas.")

# Contar el número total de cuencas en la capa final
result = arcpy.GetCount_management(Cuencas_final)
count_final = int(result.getOutput(0))
arcpy.AddMessage(u"Número total de cuencas en la capa final: {}".format(count_final))


#=============================================================================
# Obtener el número total de cuencas en Cuencas_final
result = arcpy.GetCount_management(Cuencas_final)
num_cuencas = int(result.getOutput(0))

arcpy.AddMessage("Número total de cuencas a procesar: {}".format(num_cuencas))


# Procesar cada cuenca individualmente
for fid in range(num_cuencas):
    ValueP = fid
    arcpy.AddMessage("Procesando cuenca con FID {}".format(fid))
    
    # Crear una capa temporal con la cuenca actual
    arcpy.MakeFeatureLayer_management(Cuencas_final, "Cuenca_Actual", "FID = {}".format(fid))
    
    try:
        # Ya no necesitamos el proceso Watershed, porque ya tenemos las cuencas definidas
        
        salida_cuenca = Workspace + "cuenca_{}.shp".format(ValueP)
        
        # Copiar la cuenca actual a un nuevo shapefile
        arcpy.CopyFeatures_management("Cuenca_Actual", salida_cuenca)
        
        salida_Fill_Clip = Workspace + "Fill_Clip_{}.tif".format(ValueP)
        arcpy.AddMessage("Process: Extract by Mask")
        arcpy.gp.ExtractByMask_sa(Fill_tif, salida_cuenca, salida_Fill_Clip)

        arcpy.AddMessage("Process: Slope")
        arcpy.gp.Slope_sa(salida_Fill_Clip, Slope_tif, "PERCENT_RISE", "1", "PLANAR", "METER")

        arcpy.AddMessage("Process: Reclassify")
        arcpy.gp.Reclassify_sa(Slope_tif, "Value", "0 3 1;3 7 2;7 12 3;12 20 4;20 35 5;35 50 6;50 75 7;75 1000 8", Reclas_Slop_tif, "DATA")

        arcpy.AddMessage("Process: Zonal Statistics as Table")
        arcpy.gp.ZonalStatisticsAsTable_sa(Reclas_Slop_tif, "Value", Slope_tif, ZonalSt_Slope, "DATA", "ALL")

        salida_Zonal_Slope = Workspace + "Zonal_Slope_{}.xls".format(ValueP)
        arcpy.AddMessage("Process: Table To Excel")
        arcpy.TableToExcel_conversion(ZonalSt_Slope, salida_Zonal_Slope, "NAME", "CODE")

        salida_Drenajes = Workspace + "Drenajes_{}.shp".format(ValueP)

        arcpy.AddMessage("Process: Clip")
        arcpy.Clip_analysis(Drenajes_Prev_shp, salida_cuenca, salida_Drenajes, "0 DecimalDegrees")

        arcpy.AddMessage("Process: Add Field")
        arcpy.AddField_management(salida_Drenajes, "Long", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

        arcpy.AddMessage("Process: Add Geometry Attributes")
        arcpy.AddGeometryAttributes_management(salida_Drenajes, "LENGTH", "KILOMETERS", "SQUARE_KILOMETERS", "PROJCS['WGS_1984_UTM_Zone_18N',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-75.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

        salida_Drenajes_Table = Workspace + "Drenajes_Table_{}.xls".format(ValueP)
        arcpy.AddMessage("Process: Table To Excel")
        arcpy.TableToExcel_conversion(salida_Drenajes, salida_Drenajes_Table, "NAME", "CODE")

        arcpy.AddMessage("Process: Add Geometry Attributes (3)")
        arcpy.AddGeometryAttributes_management(salida_cuenca, "AREA;AREA_GEODESIC;PERIMETER_LENGTH;PERIMETER_LENGTH_GEODESIC;CENTROID;CENTROID_INSIDE;LINE_START_MID_END;PART_COUNT;POINT_COUNT;EXTENT", "KILOMETERS", "SQUARE_KILOMETERS", "PROJCS['WGS_1984_UTM_Zone_18N',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-75.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

        salida_Datos_Cuenca = Workspace + "Datos_Cuenca_{}.xls".format(ValueP)  # Nombre dinámico basado en Value
        arcpy.AddMessage("Process: Table To Excel")
        arcpy.TableToExcel_conversion(salida_cuenca, salida_Datos_Cuenca, "NAME", "CODE")

        salida_Cuenca_MBG = Workspace + "Cuenca_MBG_{}.shp".format(ValueP)  # Nombre dinámico basado en Value
    
        arcpy.AddMessage("Process: Minimum Bounding Geometry")
        arcpy.MinimumBoundingGeometry_management(salida_cuenca, salida_Cuenca_MBG, "RECTANGLE_BY_AREA", "NONE", "", "NO_MBG_FIELDS")
    
        salida_Cuenca_MBG2 = Workspace + "Cuenca_MBG_{}.xls".format(ValueP)  # Nombre dinámico basado en Value
    
        arcpy.AddMessage("Process: Table To Excel (3)")
        arcpy.TableToExcel_conversion(salida_Cuenca_MBG, salida_Cuenca_MBG2, "NAME", "CODE")

        arcpy.AddMessage("Process: Extract by Mask")
        arcpy.gp.ExtractByMask_sa(Input_Dem, salida_cuenca, DEM_Clip_tif)

        arcpy.AddMessage("Process: Reclassify")
        arcpy.gp.Reclassify_sa(DEM_Clip_tif, "VALUE", "50 100 1;100 150 2;150 200 3;200 250 4;250 300 5;300 350 6;350 400 7;400 450 8;450 500 9;500 550 10;550 600 11;600 650 12;650 700 13;700 750 14;750 800 15;800 850 16;850 900 17;900 950 18;950 1000 19;1000 1050 20;1050 1100 21;1100 1150 22;1150 1200 23;1200 1250 24;1250 1300 25;1300 1350 26;1350 1400 27;1400 1450 28;1450 1500 29;1500 1550 30;1550 1600 31;1600 1650 32;1650 1700 33;1700 1750 34;1750 1800 35;1800 1850 36;1850 1900 37;1900 1950 38;1950 2000 39;2000 2050 40;2050 2100 41;2100 2150 42;2150 2200 43;2200 2250 44;2250 2300 45;2300 2350 46;2350 2400 47;2400 2450 48;2450 2500 49;2500 2550 50;2550 2600 51;2600 2650 52;2650 2700 53;2700 2750 54;2750 2800 55;2800 2850 56;2850 2900 57;2900 2950 58;2950 3000 59;3000 3050 60;3050 3100 61;3100 3150 62;3150 3200 63;3200 3250 64;3250 3300 65;3300 3350 66;3350 3400 67;3400 3450 68;3450 3500 69;3500 3550 70;3550 3600 71;3600 3650 72;3650 3700 73;3700 3750 74;3750 3800 75;3800 3850 76;3850 3900 77;3900 3950 78;3950 4000 79;4000 4050 80;4050 4100 81;4100 4150 82;4150 4200 83;4200 4250 84;4250 4300 85;4300 4350 86;4350 4400 87;4400 4450 88;4450 4500 89;4500 4550 90;4550 4600 91;4600 4650 92;4650 4700 93;4700 4750 94;4750 4800 95;4800 4850 96;4850 4900 97;4900 4950 98;4950 5000 99", Reclass_dem_tif, "DATA")
    
        arcpy.AddMessage("Process: Zonal Statistics as Table")
        arcpy.gp.ZonalStatisticsAsTable_sa(Reclass_dem_tif, "Value", DEM_Clip_tif, ZonalDem, "DATA", "ALL")
    
        salida_Areas_Curva = Workspace + "Areas_Curva_{}.xls".format(ValueP)  # Nombre dinámico basado en Value
 
        arcpy.AddMessage("Process: Table To Excel (4)")
        arcpy.TableToExcel_conversion(ZonalDem, salida_Areas_Curva, "NAME", "CODE")

        arcpy.AddMessage("Process: Delete (4)")
        arcpy.Delete_management(DEM_Clip_tif, "")

# Process: Delete
#arcpy.Delete_management(Fill_tif, "")

# Process: Delete (2)
#arcpy.Delete_management(FlowDir_tif, "")

# Process: Delete (3)
#arcpy.Delete_management(FlowAcc_tif, "")

# Process: Delete (5)
#arcpy.Delete_management(rastercal_tif, "")

# Process: Delete (6)
#arcpy.Delete_management(StreamO_tif, "")

# Process: Delete (7)
#arcpy.Delete_management(Drenajes_Prev_shp, "")

        arcpy.AddMessage("Process: Delete (8)")
        arcpy.Delete_management(Watersh_tif, "")

        arcpy.AddMessage("Process: Delete (9)")
        arcpy.Delete_management(Point_Layer, "")

        arcpy.AddMessage("Process: Delete (10)")
        arcpy.Delete_management(Cuenca_MBG_value_, "")

        arcpy.AddMessage("Process: Delete (11)")
        #arcpy.Delete_management(salida_cuenca, "")

        arcpy.AddMessage("Process: Delete (12)")
        #arcpy.Delete_management(salida_Fill_Clip, "")

        arcpy.AddMessage("Process: Delete (14)")
        arcpy.Delete_management(Slope_tif, "")

        arcpy.AddMessage("Process: Delete (13)")
        arcpy.Delete_management(Reclass_dem_tif, "")

        arcpy.AddMessage("Process: Delete (16)")
        arcpy.Delete_management(Reclas_Slop_tif, "")

        arcpy.AddMessage("Process: Delete (15)")
        arcpy.Delete_management(ZonalDem, "")

        arcpy.AddMessage("Process: Delete (17)")
        arcpy.Delete_management(ZonalSt_Slope, "")

        arcpy.AddMessage("Process: Delete (18)")
        arcpy.Delete_management(Drenajes_shp__2_, "")

        arcpy.AddMessage("Process: Delete (19)")
        #arcpy.Delete_management(salida_Drenajes, "")

    except Exception as e:
        arcpy.AddWarning("Error al procesar la cuenca con FID {}: {}".format(fid, str(e)))
        continue

    finally:
        arcpy.Delete_management("Cuenca_Actual")