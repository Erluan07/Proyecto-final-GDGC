# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# P_Morfo_Ciclo.py
# Created on: 2024-04-16 11:28:30.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: P_Morfo_Ciclo <Input_Dem> <Input_Point> <Workspace> 
# Description: 
# Ezequiel De Jesús Ferro Palacios
# Universidad Nacional
# ejferrop@unal.edu.co

# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo


# Import arcpy module
import arcpy

# Load required toolboxes
#arcpy.ImportToolbox("Model Functions")

# Script arguments
#Input_Dem = arcpy.GetParameterAsText(0)
#if Input_Dem == '#' or not Input_Dem:
#    Input_Dem = "dem_igua_alos" # provide a default value if unspecified

#Input_Point = arcpy.GetParameterAsText(1)
#if Input_Point == '#' or not Input_Point:
#    Input_Point = "Igua_Point" # provide a default value if unspecified

#Workspace = arcpy.GetParameterAsText(2)
#if Workspace == '#' or not Workspace:
#    Workspace = "D:\\Morfometria\\Workspace4" # provide a default value if unspecified

# Script arguments
Input_Dem = arcpy.GetParameterAsText(0)
Input_Point = arcpy.GetParameterAsText(1)
arcpy.env.overwriteOutput = True
# Obtener directorio de DEM
arcpy.AddMessage("Obteniendo directorio de trabajo...")
DES_DEM = arcpy.Describe(Input_Dem)
Workspace = DES_DEM.path + "\\"
arcpy.AddMessage("...completado")

# Local variables:
Fill_tif = Workspace + "Fill.tif"
Output_drop_raster = ""
FlowDir_tif = Workspace + "FlowDir.tif"
I_Igua_Point_FID = Input_Point
Point = I_Igua_Point_FID
FlowAcc_tif = Workspace + "FlowAcc.tif"
rastercal_tif = Workspace + "rastercal.tif"
StreamO_tif = Workspace + "StreamO.tif"
Drenajes_Prev_shp = Workspace + "Drenajes_Prev.shp"
Point_Layer = "Igua_Point_Layer"
Watersh_tif = Workspace + "Watersh.tif"
Cuenca_value__shp = Workspace + "Cuenca%value%.shp"
Cuenca_T = Cuenca_value__shp
Fill_Clip_tif = Workspace + "Fill_Clip.tif"
Slope_tif = Workspace + "Slope.tif"
Reclas_Slop_tif = Workspace + "Reclas_Slop.tif"
ZonalSt_Slope = Workspace + "ZonalSt_Slope"
Zonal_Slope_value__xls = Workspace + "Zonal_Slope%value%.xls"
Delete_succeeded = "true"
Drenajes_value__shp = Workspace + "Drenajes%value%.shp"
Drenajes_shp__3_ = Drenajes_value__shp
Drenajes_shp__2_ = Drenajes_shp__3_
Drenajes_Table_value__xls = Workspace + "Drenajes_Table%value%.xls"
Delete_succeeded__2_ = "true"
Delete_succeeded__3_ = "true"
Delete_succeeded__5_ = "true"
Delete_succeeded__6_ = "true"
Delete_succeeded__7_ = "true"
Delete_succeeded__8_ = "true"
Delete_succeeded__9_ = "true"
Datos_Cuenca_value__xls = Workspace + "Datos_Cuenca%value%.xls"
Cuenca_MBG_value_ = Workspace + "Cuenca_MBG%value%"
Cuenca_MBG_value__xls = Workspace + "Cuenca_MBG%value%.xls"
DEM_Clip_tif = Workspace + "DEM_Clip.tif"
Reclass_dem_tif = Workspace + "Reclass_dem.tif"
ZonalDem = Workspace + "ZonalDem"
Areas_Curva_value__xls = Workspace + "Areas_Curva%value%.xls"
SnapPourPoint = Workspace + "SnapPourPoint.tif"
Delete_succeeded__4_ = "true"
Delete_succeeded__10_ = "true"
Delete_succeeded__11_ = "true"
Delete_succeeded__12_ = "true"
Delete_succeeded__13_ = "true"
Delete_succeeded__14_ = "true"
Delete_succeeded__15_ = "true"
Delete_succeeded__16_ = "true"
Delete_succeeded__17_ = "true"
Delete_succeeded__18_ = "true"
Delete_succeeded__19_ = "true"


# Hidrologia para definir una cuenca, desde FILL hasta Watershe
arcpy.AddMessage("Process: Fill")
#arcpy.gp.Fill_sa(Input_Dem, Fill_tif, "")
#arcpy.gp.Fill_sa(Input_Dem, Fill_tif, "")

arcpy.AddMessage("Process: Flow Direction")
#arcpy.gp.FlowDirection_sa(Fill_tif, FlowDir_tif, "NORMAL", Output_drop_raster, "D8")


arcpy.AddMessage("Process: Flow Accumulation")
#arcpy.gp.FlowAccumulation_sa(FlowDir_tif, FlowAcc_tif, "", "FLOAT", "D8")

arcpy.AddMessage("Expresion para la calculadora de raster")
#expression = "Con(\"{}\" >= 1000, 1)".format(FlowAcc_tif)

arcpy.AddMessage("Ejecutar la calculadora de raster")
#arcpy.gp.RasterCalculator_sa(expression, rastercal_tif)


arcpy.AddMessage("Process: Stream Order")
#arcpy.gp.StreamOrder_sa(rastercal_tif, FlowDir_tif, StreamO_tif, "STRAHLER")

arcpy.AddMessage("Process: Stream to Feature")
#arcpy.gp.StreamToFeature_sa(StreamO_tif, FlowDir_tif, Drenajes_Prev_shp, "NO_SIMPLIFY")

# Process: Snap Pour Point
#arcpy.gp.SnapPourPoint_sa(Input_Point, FlowAcc_tif, SnapPourPoint, "0", "")

arcpy.AddMessage("Process: Watershed")
#arcpy.gp.Watershed_sa(FlowDir_tif, SnapPourPoint, Watersh_tif, "VALUE")

arcpy.AddMessage("Process: Raster to Polygon")
tempEnvironment0 = arcpy.env.outputZFlag
arcpy.env.outputZFlag = "Disabled"
tempEnvironment1 = arcpy.env.outputMFlag
arcpy.env.outputMFlag = "Disabled"
salida_cuenca = Workspace + "cuencas.shp"
arcpy.RasterToPolygon_conversion(Watersh_tif, salida_cuenca, "SIMPLIFY", "Value", "SINGLE_OUTER_PART", "")
arcpy.env.outputZFlag = tempEnvironment0
arcpy.env.outputMFlag = tempEnvironment1

# Añadir un nuevo campo para el área
arcpy.AddField_management(salida_cuenca, "Area_m2", "DOUBLE")

# Calcular el área en metros cuadrados
arcpy.CalculateField_management(salida_cuenca, "Area_m2", "!shape.area@squaremeters!", "PYTHON")

# Crear una capa temporal de las cuencas
arcpy.MakeFeatureLayer_management(salida_cuenca, "cuencas_layer")

# Seleccionar las cuencas con área mayor o igual a 1000 m²
arcpy.SelectLayerByAttribute_management("cuencas_layer", "NEW_SELECTION", "Area_m2 >= 1000")

# Crear un nuevo feature class solo con las cuencas seleccionadas
salida_cuenca_filtrada = Workspace + "cuencas_filtradas.shp"
arcpy.CopyFeatures_management("cuencas_layer", salida_cuenca_filtrada)

# Obtener el número total de cuencas filtradas
total_cuencas = int(arcpy.GetCount_management(salida_cuenca_filtrada).getOutput(0))
arcpy.AddMessage("Total de cuencas a procesar después del filtrado: {}".format(total_cuencas))


# Crear una capa temporal de las cuencas
arcpy.MakeFeatureLayer_management(salida_cuenca_filtrada, "cuencas_layer2")

# Obtener el número total de cuencas
total_cuencas = int(arcpy.GetCount_management("cuencas_layer2").getOutput(0))
arcpy.AddMessage("Total de cuencas a procesar: {}".format(total_cuencas))

# Iterar sobre cada cuenca
for cuenca_id in range(total_cuencas):
    arcpy.AddMessage("Procesando cuenca {} de {}".format(cuenca_id + 1, total_cuencas))
    
    # Seleccionar la cuenca actual
    arcpy.SelectLayerByAttribute_management("cuencas_layer2", "NEW_SELECTION", "FID = {}".format(cuenca_id))
    
    # Crear un feature class temporal para la cuenca actual
    cuenca_temp = arcpy.CreateScratchName("cuenca_temp", "", "FeatureClass", Workspace)
    arcpy.CopyFeatures_management("cuencas_layer2", cuenca_temp)
        
    try:
        arcpy.AddMessage("Comprobando cuenca_temp: {}".format(arcpy.Exists(cuenca_temp)))
        arcpy.AddMessage("Número de características en cuenca_temp: {}".format(arcpy.GetCount_management(cuenca_temp)[0]))
        arcpy.AddMessage("Comprobando Fill_tif: {}".format(arcpy.Exists(Fill_tif)))
        salida_Fill_Clip = Workspace + "Fill_Clip_{}.tif".format(cuenca_id)

        # Obtener y imprimir las extensiones
        desc_cuenca = arcpy.Describe(cuenca_temp)
        desc_fill = arcpy.Describe(Fill_tif)
        arcpy.AddMessage("Extensión de cuenca_temp: {}, {}, {}, {}".format(
            desc_cuenca.extent.XMin, desc_cuenca.extent.YMin, desc_cuenca.extent.XMax, desc_cuenca.extent.YMax))
        arcpy.AddMessage("Extensión de Fill_tif: {}, {}, {}, {}".format(
            desc_fill.extent.XMin, desc_fill.extent.YMin, desc_fill.extent.XMax, desc_fill.extent.YMax))

        # Luego, intenta el Extract by Mask
        arcpy.AddMessage("Process: Extract by Mask (2)")
        arcpy.gp.ExtractByMask_sa(Fill_tif, cuenca_temp, salida_Fill_Clip)

        arcpy.AddMessage("Process: Slope")
        arcpy.gp.Slope_sa(salida_Fill_Clip, Slope_tif, "PERCENT_RISE", "1", "PLANAR", "METER")

        arcpy.AddMessage("Process: Reclassify (2)")
        arcpy.gp.Reclassify_sa(Slope_tif, "Value", "0 3 1;3 7 2;7 12 3;12 20 4;20 35 5;35 50 6;50 75 7;75 1000 8", Reclas_Slop_tif, "DATA")

        arcpy.AddMessage("Process: Zonal Statistics as Table (2)")
        arcpy.gp.ZonalStatisticsAsTable_sa(Reclas_Slop_tif, "Value", Slope_tif, ZonalSt_Slope, "DATA", "ALL")

        salida_Zonal_Slope = Workspace + "Zonal_Slope_{}.xls".format(cuenca_id)
        arcpy.AddMessage("Process: Table To Excel (5)")
        arcpy.TableToExcel_conversion(ZonalSt_Slope, salida_Zonal_Slope, "NAME", "CODE")

        salida_Drenajes = Workspace + "Drenajes_{}.shp".format(cuenca_id)

        arcpy.AddMessage("Process: Clip")
        arcpy.Clip_analysis(Drenajes_Prev_shp, cuenca_temp, salida_Drenajes, "0 DecimalDegrees")

        arcpy.AddMessage("Process: Add Field")
        arcpy.AddField_management(salida_Drenajes, "Long", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

        arcpy.AddMessage("Process: Add Geometry Attributes (2)")
        arcpy.AddGeometryAttributes_management(salida_Drenajes, "LENGTH", "KILOMETERS", "SQUARE_KILOMETERS", "PROJCS['WGS_1984_UTM_Zone_18N',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-75.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

        salida_Drenajes_Table = Workspace + "Drenajes_Table_{}.xls".format(cuenca_id)  # Nombre dinámico basado en Value
        arcpy.AddMessage("Process: Table To Excel (2)")
        arcpy.TableToExcel_conversion(salida_Drenajes, salida_Drenajes_Table, "NAME", "CODE")


        arcpy.AddMessage("Process: Add Geometry Attributes (3)")
        arcpy.AddGeometryAttributes_management(cuenca_temp, "AREA;AREA_GEODESIC;PERIMETER_LENGTH;PERIMETER_LENGTH_GEODESIC;CENTROID;CENTROID_INSIDE;LINE_START_MID_END;PART_COUNT;POINT_COUNT;EXTENT", "KILOMETERS", "SQUARE_KILOMETERS", "PROJCS['WGS_1984_UTM_Zone_18N',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-75.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

        salida_Datos_Cuenca = Workspace + "Datos_Cuenca_{}.xls".format(cuenca_id)  # Nombre dinámico basado en Value
        arcpy.AddMessage("Process: Table To Excel")
        arcpy.TableToExcel_conversion(cuenca_temp, salida_Datos_Cuenca, "NAME", "CODE")

        cuenca_temp_MBG = Workspace + "Cuenca_MBG_{}.shp".format(cuenca_id)  # Nombre dinámico basado en Value
    
        arcpy.AddMessage("Process: Minimum Bounding Geometry")
        arcpy.MinimumBoundingGeometry_management(cuenca_temp, cuenca_temp_MBG, "RECTANGLE_BY_AREA", "NONE", "", "NO_MBG_FIELDS")
    
        cuenca_temp_MBG2 = Workspace + "Cuenca_MBG_{}.xls".format(cuenca_id)  # Nombre dinámico basado en Value
    
        arcpy.AddMessage("Process: Table To Excel (3)")
        arcpy.TableToExcel_conversion(cuenca_temp_MBG, cuenca_temp_MBG2, "NAME", "CODE")

        arcpy.AddMessage("Process: Extract by Mask")
        arcpy.gp.ExtractByMask_sa(Input_Dem, cuenca_temp, DEM_Clip_tif)

        arcpy.AddMessage("Process: Reclassify")
        arcpy.gp.Reclassify_sa(DEM_Clip_tif, "VALUE", "50 100 1;100 150 2;150 200 3;200 250 4;250 300 5;300 350 6;350 400 7;400 450 8;450 500 9;500 550 10;550 600 11;600 650 12;650 700 13;700 750 14;750 800 15;800 850 16;850 900 17;900 950 18;950 1000 19;1000 1050 20;1050 1100 21;1100 1150 22;1150 1200 23;1200 1250 24;1250 1300 25;1300 1350 26;1350 1400 27;1400 1450 28;1450 1500 29;1500 1550 30;1550 1600 31;1600 1650 32;1650 1700 33;1700 1750 34;1750 1800 35;1800 1850 36;1850 1900 37;1900 1950 38;1950 2000 39;2000 2050 40;2050 2100 41;2100 2150 42;2150 2200 43;2200 2250 44;2250 2300 45;2300 2350 46;2350 2400 47;2400 2450 48;2450 2500 49;2500 2550 50;2550 2600 51;2600 2650 52;2650 2700 53;2700 2750 54;2750 2800 55;2800 2850 56;2850 2900 57;2900 2950 58;2950 3000 59;3000 3050 60;3050 3100 61;3100 3150 62;3150 3200 63;3200 3250 64;3250 3300 65;3300 3350 66;3350 3400 67;3400 3450 68;3450 3500 69;3500 3550 70;3550 3600 71;3600 3650 72;3650 3700 73;3700 3750 74;3750 3800 75;3800 3850 76;3850 3900 77;3900 3950 78;3950 4000 79;4000 4050 80;4050 4100 81;4100 4150 82;4150 4200 83;4200 4250 84;4250 4300 85;4300 4350 86;4350 4400 87;4400 4450 88;4450 4500 89;4500 4550 90;4550 4600 91;4600 4650 92;4650 4700 93;4700 4750 94;4750 4800 95;4800 4850 96;4850 4900 97;4900 4950 98;4950 5000 99", Reclass_dem_tif, "DATA")
    
        arcpy.AddMessage("Process: Zonal Statistics as Table")
        arcpy.gp.ZonalStatisticsAsTable_sa(Reclass_dem_tif, "Value", DEM_Clip_tif, ZonalDem, "DATA", "ALL")
    
        salida_Areas_Curva = Workspace + "Areas_Curva_{}.xls".format(cuenca_id)  # Nombre dinámico basado en Value
 
        arcpy.AddMessage("Process: Table To Excel (4)")
        arcpy.TableToExcel_conversion(ZonalDem, salida_Areas_Curva, "NAME", "CODE")

        arcpy.AddMessage("Process: Delete (4)")
        arcpy.Delete_management(DEM_Clip_tif, "")

# Process: Delete
#arcpy.Delete_management(Fill_tif, "")

# Process: Delete (2)
#arcpy.Delete_management(FlowDir_tif, "")

# Process: Delete (3)
#arcpy.Delete_management(FlowAcc_tif, "")

# Process: Delete (5)
#arcpy.Delete_management(rastercal_tif, "")

# Process: Delete (6)
#arcpy.Delete_management(StreamO_tif, "")

# Process: Delete (7)
#arcpy.Delete_management(Drenajes_Prev_shp, "")

        arcpy.AddMessage("Process: Delete (8)")
        arcpy.Delete_management(Watersh_tif, "")

        arcpy.AddMessage("Process: Delete (9)")
        arcpy.Delete_management(Point_Layer, "")

        arcpy.AddMessage("Process: Delete (10)")
        arcpy.Delete_management(Cuenca_MBG_value_, "")

        arcpy.AddMessage("Process: Delete (11)")
        #arcpy.Delete_management(salida_cuenca, "")

        arcpy.AddMessage("Process: Delete (12)")
        #arcpy.Delete_management(salida_Fill_Clip, "")

        arcpy.AddMessage("Process: Delete (14)")
        arcpy.Delete_management(Slope_tif, "")

        arcpy.AddMessage("Process: Delete (13)")
        arcpy.Delete_management(Reclass_dem_tif, "")

        arcpy.AddMessage("Process: Delete (16)")
        arcpy.Delete_management(Reclas_Slop_tif, "")

        arcpy.AddMessage("Process: Delete (15)")
        arcpy.Delete_management(ZonalDem, "")

        arcpy.AddMessage("Process: Delete (17)")
        arcpy.Delete_management(ZonalSt_Slope, "")

        arcpy.AddMessage("Process: Delete (18)")
        arcpy.Delete_management(Drenajes_shp__2_, "")

        arcpy.AddMessage("Process: Delete (19)")
        #arcpy.Delete_management(salida_Drenajes, "")

    except Exception as e:
        arcpy.AddWarning("Error al procesar la cuenca {}: {}".format(cuenca_id + 1, str(e)))
        continue

    finally:
        # Clean up temporary files
        for temp_file in [cuenca_temp, DEM_Clip_tif, Slope_tif, Reclas_Slop_tif, ZonalSt_Slope, ZonalDem]:
            if arcpy.Exists(temp_file):
                arcpy.Delete_management(temp_file)