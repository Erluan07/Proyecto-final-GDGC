# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# P_Morfo_Ciclo.py
# Created on: 2024-04-16 11:28:30.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: P_Morfo_Ciclo <Input_Dem> <Input_Point> <Workspace> 
# Description: 
# Ezequiel De Jesús Ferro Palacios
# Universidad Nacional
# ejferrop@unal.edu.co

# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo


# Import arcpy module
import arcpy

# Load required toolboxes
#arcpy.ImportToolbox("Model Functions")

# Script arguments
#Input_Dem = arcpy.GetParameterAsText(0)
#if Input_Dem == '#' or not Input_Dem:
#    Input_Dem = "dem_igua_alos" # provide a default value if unspecified

#Input_Point = arcpy.GetParameterAsText(1)
#if Input_Point == '#' or not Input_Point:
#    Input_Point = "Igua_Point" # provide a default value if unspecified

#Workspace = arcpy.GetParameterAsText(2)
#if Workspace == '#' or not Workspace:
#    Workspace = "D:\\Morfometria\\Workspace4" # provide a default value if unspecified

# Script arguments
Input_Dem = arcpy.GetParameterAsText(0)
Input_Point = arcpy.GetParameterAsText(1)
arcpy.env.overwriteOutput = True
# Obtener directorio de DEM
arcpy.AddMessage("Obteniendo directorio de trabajo...")
DES_DEM = arcpy.Describe(Input_Dem)
Workspace = DES_DEM.path + "\\"
arcpy.AddMessage("...completado")

# Local variables:
Fill_tif = Workspace + "Fill.tif"
Output_drop_raster = ""
FlowDir_tif = Workspace + "FlowDir.tif"
I_Igua_Point_FID = Input_Point
Point = I_Igua_Point_FID
FlowAcc_tif = Workspace + "FlowAcc.tif"
rastercal_tif = Workspace + "rastercal.tif"
StreamO_tif = Workspace + "StreamO.tif"
Drenajes_Prev_shp = Workspace + "Drenajes_Prev.shp"
Point_Layer = "Igua_Point_Layer"
Watersh_tif = Workspace + "Watersh.tif"
Cuenca_value__shp = Workspace + "Cuenca%value%.shp"
Cuenca_T = Cuenca_value__shp
Fill_Clip_tif = Workspace + "Fill_Clip.tif"
Slope_tif = Workspace + "Slope.tif"
Reclas_Slop_tif = Workspace + "Reclas_Slop.tif"
ZonalSt_Slope = Workspace + "ZonalSt_Slope"
Zonal_Slope_value__xls = Workspace + "Zonal_Slope%value%.xls"
Delete_succeeded = "true"
Drenajes_value__shp = Workspace + "Drenajes%value%.shp"
Drenajes_shp__3_ = Drenajes_value__shp
Drenajes_shp__2_ = Drenajes_shp__3_
Drenajes_Table_value__xls = Workspace + "Drenajes_Table%value%.xls"
Delete_succeeded__2_ = "true"
Delete_succeeded__3_ = "true"
Delete_succeeded__5_ = "true"
Delete_succeeded__6_ = "true"
Delete_succeeded__7_ = "true"
Delete_succeeded__8_ = "true"
Delete_succeeded__9_ = "true"
Datos_Cuenca_value__xls = Workspace + "Datos_Cuenca%value%.xls"
Cuenca_MBG_value_ = Workspace + "Cuenca_MBG%value%"
Cuenca_MBG_value__xls = Workspace + "Cuenca_MBG%value%.xls"
DEM_Clip_tif = Workspace + "DEM_Clip.tif"
Reclass_dem_tif = Workspace + "Reclass_dem.tif"
ZonalDem = Workspace + "ZonalDem"
Areas_Curva_value__xls = Workspace + "Areas_Curva%value%.xls"
SnapPourPoint = Workspace + "SnapPourPoint.tif"
Delete_succeeded__4_ = "true"
Delete_succeeded__10_ = "true"
Delete_succeeded__11_ = "true"
Delete_succeeded__12_ = "true"
Delete_succeeded__13_ = "true"
Delete_succeeded__14_ = "true"
Delete_succeeded__15_ = "true"
Delete_succeeded__16_ = "true"
Delete_succeeded__17_ = "true"
Delete_succeeded__18_ = "true"
Delete_succeeded__19_ = "true"


# Hidrologia para definir una cuenca, desde FILL hasta Watershe
arcpy.AddMessage("Process: Fill")
#arcpy.gp.Fill_sa(Input_Dem, Fill_tif, "")
#arcpy.gp.Fill_sa(Input_Dem, Fill_tif, "")

arcpy.AddMessage("Process: Flow Direction")
#arcpy.gp.FlowDirection_sa(Fill_tif, FlowDir_tif, "NORMAL", Output_drop_raster, "D8")


arcpy.AddMessage("Process: Flow Accumulation")
#arcpy.gp.FlowAccumulation_sa(FlowDir_tif, FlowAcc_tif, "", "FLOAT", "D8")

arcpy.AddMessage("Expresion para la calculadora de raster")
#expression = "Con(\"{}\" >= 1000, 1)".format(FlowAcc_tif)

arcpy.AddMessage("Ejecutar la calculadora de raster")
#arcpy.gp.RasterCalculator_sa(expression, rastercal_tif)


# Process: Stream to Feature
arcpy.AddMessage("Process: Stream to Feature")
arcpy.gp.StreamToFeature_sa(StreamO_tif, FlowDir_tif, Drenajes_Prev_shp, "NO_SIMPLIFY")

# Obtener el número de puntos en la capa Input_Point
arcpy.AddMessage("Obteniendo el número de puntos en la capa Input_Point")
Num_puntos = int(arcpy.GetCount_management(Input_Point).getOutput(0))
arcpy.AddMessage(f"Número de puntos a procesar: {Num_puntos}")

# Crear una lista de IDs de puntos a procesar
fids_a_procesar = list(range(Num_puntos))

# Iterar sobre cada punto en la capa
for fid in fids_a_procesar:
    arcpy.AddMessage(f"Procesando punto con FID: {fid}")
    
    # Crear una nueva capa a partir de la capa Input_Point, seleccionando el elemento con el FID actual
    arcpy.MakeFeatureLayer_management(Input_Point, "Input_Point_Layer")
    arcpy.SelectLayerByAttribute_management("Input_Point_Layer", "NEW_SELECTION", f'"FID" = {fid}')
    
    # Process: Snap Pour Point
    SnapPourPoint = Workspace + f"SnapPourPoint_{fid}.shp"
    arcpy.AddMessage("Process: Snap Pour Point")
    arcpy.gp.SnapPourPoint_sa("Input_Point_Layer", FlowAcc_tif, SnapPourPoint, "0", "")

    try:
        # Process: Watershed
        arcpy.AddMessage("Process: Watershed")
        arcpy.gp.Watershed_sa(FlowDir_tif, SnapPourPoint, Watersh_tif, "FID")

        # Process: Raster to Polygon
        arcpy.AddMessage("Process: Raster to Polygon")
        salida_cuenca = Workspace + f"cuenca_{fid}.shp"  # Nombre dinámico basado en FID
        arcpy.RasterToPolygon_conversion(Watersh_tif, salida_cuenca, "SIMPLIFY", "Value", "SINGLE_OUTER_PART", "")

        # Calcular el área de las cuencas resultantes
        arcpy.AddField_management(salida_cuenca, "Area_m2", "DOUBLE")
        arcpy.CalculateGeometryAttributes_management(salida_cuenca, [["Area_m2", "AREA"]], area_unit="SQUARE_METERS")

        # Eliminar las cuencas con áreas menores a 1000 m²
        arcpy.MakeFeatureLayer_management(salida_cuenca, "cuenca_layer")
        arcpy.SelectLayerByAttribute_management("cuenca_layer", "NEW_SELECTION", '"Area_m2" < 1000')
        arcpy.DeleteFeatures_management("cuenca_layer")

        # Check if there are any remaining cuencas after deletion
        if int(arcpy.GetCount_management("cuenca_layer").getOutput(0)) > 0:
            salida_Fill_Clip = Workspace + f"Fill_Clip_{fid}.tif"  # Nombre dinámico basado en FID
            arcpy.AddMessage("Process: Extract by Mask (2)")
            arcpy.gp.ExtractByMask_sa(Fill_tif, salida_cuenca, salida_Fill_Clip)

            arcpy.AddMessage("Process: Slope")
            arcpy.gp.Slope_sa(salida_Fill_Clip, Slope_tif, "PERCENT_RISE", "1", "PLANAR", "METER")

            arcpy.AddMessage("Process: Reclassify (2)")
            arcpy.gp.Reclassify_sa(Slope_tif, "Value", "0 3 1;3 7 2;7 12 3;12 20 4;20 35 5;35 50 6;50 75 7;75 1000 8", Reclas_Slop_tif, "DATA")

            arcpy.AddMessage("Process: Zonal Statistics as Table (2)")
            arcpy.gp.ZonalStatisticsAsTable_sa(Reclas_Slop_tif, "Value", Slope_tif, ZonalSt_Slope, "DATA", "ALL")

            salida_Zonal_Slope = Workspace + f"Zonal_Slope_{fid}.xls"  # Nombre dinámico basado en FID
            arcpy.AddMessage("Process: Table To Excel (5)")
            arcpy.TableToExcel_conversion(ZonalSt_Slope, salida_Zonal_Slope, "NAME", "CODE")

            salida_Drenajes = Workspace + f"Drenajes_{fid}.shp"  # Nombre dinámico basado en FID

            arcpy.AddMessage("Process: Clip")
            arcpy.Clip_analysis(Drenajes_Prev_shp, salida_cuenca, salida_Drenajes, "0 DecimalDegrees")

            arcpy.AddMessage("Process: Add Field")
            arcpy.AddField_management(salida_Drenajes, "Long", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

            arcpy.AddMessage("Process: Add Geometry Attributes (2)")
            arcpy.AddGeometryAttributes_management(salida_Drenajes, "LENGTH", "KILOMETERS", "SQUARE_KILOMETERS", "PROJCS['WGS_1984_UTM_Zone_18N',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-75.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

            salida_Drenajes_Table = Workspace + f"Drenajes_Table_{fid}.xls"  # Nombre dinámico basado en FID
            arcpy.AddMessage("Process: Table To Excel (2)")
            arcpy.TableToExcel_conversion(salida_Drenajes, salida_Drenajes_Table, "NAME", "CODE")

    except Exception as e:
        arcpy.AddMessage(f"Error procesando el punto con FID {fid}: {str(e)}")